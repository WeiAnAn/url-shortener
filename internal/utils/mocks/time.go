// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/utils/time.go

// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockTimeUtil is a mock of TimeUtil interface.
type MockTimeUtil struct {
	ctrl     *gomock.Controller
	recorder *MockTimeUtilMockRecorder
}

// MockTimeUtilMockRecorder is the mock recorder for MockTimeUtil.
type MockTimeUtilMockRecorder struct {
	mock *MockTimeUtil
}

// NewMockTimeUtil creates a new mock instance.
func NewMockTimeUtil(ctrl *gomock.Controller) *MockTimeUtil {
	mock := &MockTimeUtil{ctrl: ctrl}
	mock.recorder = &MockTimeUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeUtil) EXPECT() *MockTimeUtilMockRecorder {
	return m.recorder
}

// Until mocks base method.
func (m *MockTimeUtil) Until(t time.Time) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Until", t)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Until indicates an expected call of Until.
func (mr *MockTimeUtilMockRecorder) Until(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Until", reflect.TypeOf((*MockTimeUtil)(nil).Until), t)
}
