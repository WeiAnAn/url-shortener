// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/short_url/repository.go

// Package mock_shorturl is a generated GoMock package.
package mock_shorturl

import (
	reflect "reflect"

	shorturl "github.com/WeiAnAn/url-shortener/internal/domain/short_url"
	gomock "github.com/golang/mock/gomock"
)

// MockShortURLRepository is a mock of ShortURLRepository interface.
type MockShortURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShortURLRepositoryMockRecorder
}

// MockShortURLRepositoryMockRecorder is the mock recorder for MockShortURLRepository.
type MockShortURLRepositoryMockRecorder struct {
	mock *MockShortURLRepository
}

// NewMockShortURLRepository creates a new mock instance.
func NewMockShortURLRepository(ctrl *gomock.Controller) *MockShortURLRepository {
	mock := &MockShortURLRepository{ctrl: ctrl}
	mock.recorder = &MockShortURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortURLRepository) EXPECT() *MockShortURLRepositoryMockRecorder {
	return m.recorder
}

// FindByShortURL mocks base method.
func (m *MockShortURLRepository) FindByShortURL(arg0 string) (*shorturl.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByShortURL", arg0)
	ret0, _ := ret[0].(*shorturl.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByShortURL indicates an expected call of FindByShortURL.
func (mr *MockShortURLRepositoryMockRecorder) FindByShortURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByShortURL", reflect.TypeOf((*MockShortURLRepository)(nil).FindByShortURL), arg0)
}

// Save mocks base method.
func (m *MockShortURLRepository) Save(arg0 *shorturl.ShortURLWithExpireTime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockShortURLRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockShortURLRepository)(nil).Save), arg0)
}
