// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/short_url/persistent_store.go

// Package mock_shorturl is a generated GoMock package.
package mock_shorturl

import (
	reflect "reflect"

	shorturl "github.com/WeiAnAn/url-shortener/internal/domain/short_url"
	gomock "github.com/golang/mock/gomock"
)

// MockPersistentStore is a mock of PersistentStore interface.
type MockPersistentStore struct {
	ctrl     *gomock.Controller
	recorder *MockPersistentStoreMockRecorder
}

// MockPersistentStoreMockRecorder is the mock recorder for MockPersistentStore.
type MockPersistentStoreMockRecorder struct {
	mock *MockPersistentStore
}

// NewMockPersistentStore creates a new mock instance.
func NewMockPersistentStore(ctrl *gomock.Controller) *MockPersistentStore {
	mock := &MockPersistentStore{ctrl: ctrl}
	mock.recorder = &MockPersistentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistentStore) EXPECT() *MockPersistentStoreMockRecorder {
	return m.recorder
}

// FindUnexpiredByShortURL mocks base method.
func (m *MockPersistentStore) FindUnexpiredByShortURL(hash string) (*shorturl.ShortURLWithExpireTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUnexpiredByShortURL", hash)
	ret0, _ := ret[0].(*shorturl.ShortURLWithExpireTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUnexpiredByShortURL indicates an expected call of FindUnexpiredByShortURL.
func (mr *MockPersistentStoreMockRecorder) FindUnexpiredByShortURL(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUnexpiredByShortURL", reflect.TypeOf((*MockPersistentStore)(nil).FindUnexpiredByShortURL), hash)
}

// Save mocks base method.
func (m *MockPersistentStore) Save(shortUrl *shorturl.ShortURLWithExpireTime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", shortUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockPersistentStoreMockRecorder) Save(shortUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPersistentStore)(nil).Save), shortUrl)
}
